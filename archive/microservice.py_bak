from flask import Flask, jsonify, request
import sqlite3
import argparse

import sqlite3

def setup_db():
    conn = sqlite3.connect('numbering.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS numbers (
        type TEXT PRIMARY KEY,
        latest_number INTEGER
    )
    ''')
    conn.commit()
    conn.close()

def get_next_number(model_type, width=4):
    conn = sqlite3.connect('numbering.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT latest_number FROM numbers WHERE type=?', (model_type,))
    row = cursor.fetchone()
    
    if row:
        next_number = row[0] + 1
    else:
        next_number = 1
        cursor.execute('INSERT INTO numbers (type, latest_number) VALUES (?, ?)', (model_type, next_number))
    
    conn.commit()
    conn.close()
    return str(next_number).zfill(width)

def confirm_number(model_type):
    conn = sqlite3.connect('numbering.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE numbers SET latest_number = latest_number + 1 WHERE type=?', (model_type,))
    conn.commit()
    conn.close()

def view_numbers():
    conn = sqlite3.connect('numbering.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT type, latest_number FROM numbers')
    rows = cursor.fetchall()
    
    conn.close()
    return rows

def main():
    parser = argparse.ArgumentParser(description="Numbering system CLI")
    subparsers = parser.add_subparsers(dest="command")

    # Command to get the next number
    get_parser = subparsers.add_parser('get', help="Get the next number for a model type")
    get_parser.add_argument('type', help="Model type")

    # Command to confirm the usage of a number
    confirm_parser = subparsers.add_parser('confirm', help="Confirm the use of the latest number for a model type")
    confirm_parser.add_argument('type', help="Model type")

    # Command to view all numbers
    view_parser = subparsers.add_parser('view', help="View current numbers for all model types")

    args = parser.parse_args()

    if args.command == "get":
        print(get_next_number(args.type))
    elif args.command == "confirm":
        confirm_number(args.type)
        print(f"Confirmed the usage of number for type {args.type}")
    elif args.command == "view":
        for row in view_numbers():
            print(f"Type: {row[0]}, Latest Number: {row[1]}")

if __name__ == "__main__":
    main()

app = Flask(__name__)

@app.route('/next/<model_type>', methods=['GET'])
def get_next_number_route(model_type):
    return jsonify({"number": get_next_number(model_type)})

@app.route('/confirm/<model_type>', methods=['POST'])
def confirm_number_route(model_type):
    confirm_number(model_type)
    return jsonify({"status": "confirmed"})

@app.route('/view', methods=['GET'])
def view_numbers_route():
    return jsonify(view_numbers())

# All the previous functions: setup_db, get_next_number, confirm_number, and view_numbers go here...

if __name__ == "__main__":
    setup_db()  # This ensures that the database is set up when the service starts
    app.run(debug=True)
